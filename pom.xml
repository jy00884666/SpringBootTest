<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    
    <groupId>com.springBoot</groupId>
    <artifactId>SpringBootTest</artifactId>
    <version>1.0-SNAPSHOT</version>
    <packaging>war</packaging>
    
    <!--加载许多版本号和<dependency>,只要父类中有依赖子类可以不写版本号<version>-->
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.3.12.RELEASE</version>
    </parent>
    
    <dependencies>
        <!--SpringBoot主要依赖,核心spring-boot-starter-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <!--AOP依赖-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-aop</artifactId>
        </dependency>
        <!--myBatis-->
        <dependency>
            <groupId>org.mybatis.spring.boot</groupId>
            <artifactId>mybatis-spring-boot-starter</artifactId>
            <version>2.2.2</version>
        </dependency>
        <!--mysql-->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
        </dependency>
        <!--SDK-->
        <dependency>
            <groupId>commons-lang</groupId>
            <artifactId>commons-lang</artifactId>
            <version>2.6</version>
        </dependency>
        <!--RabbitMQ-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-amqp</artifactId>
        </dependency>
        <!--JSON-->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
            <version>1.2.54</version>
        </dependency>
        <!--SpringBoot测试,空的起步依赖-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <!--junit测试的起步依赖-->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.12</version>
        </dependency>
        <!--Lombok插件-->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.16.6</version>
        </dependency>
        <!--Redis在spring boot 2.0以后默认使用lettuce客户端整合-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-redis</artifactId>
        </dependency>
        <!-- Redis lettuce pool 缓存连接池 -->
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-pool2</artifactId>
        </dependency>
        <!-- Redis jackson json 优化缓存对象序列化 -->
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
        </dependency>
    </dependencies>
    
    <!--
        build 标签的子标签大致包含三个主体部分
        1.约定的目录结构
            <sourceDirectory>D:\idea\maven-test\src\main\java</sourceDirectory>
            <scriptSourceDirectory>D:\idea\maven-test\src\main\scripts</scriptSourceDirectory>
            <testSourceDirectory>D:\idea\maven-test\src\test\java</testSourceDirectory>
            <outputDirectory>D:\idea\maven-test\target\classes</outputDirectory>
            <testOutputDirectory>D:\idea\maven-test\target\test-classes</testOutputDirectory>
            <resources>
                <resource>
                    <directory>D:\idea\maven-test\src\main\resources</directory>
                </resource>
            </resources>
            <testResources>
                <testResource>
                    <directory>D:\idea\maven-test\src\test\resources</directory>
                </testResource>
            </testResources>
            <directory>D:\idea\maven-test\target</directory>
            <finalName>maven-test-1.0-SNAPSHOT</finalName>
        2.备用插件管理
            <pluginManagement>
                <plugins>
                    <plugin>
                        <artifactId>maven-antrun-plugin</artifactId>
                        <version>1.3</version>
                    </plugin>
                    <plugin>
                        <artifactId>maven-assembly-plugin</artifactId>
                        <version>2.2-beta-5</version>
                    </plugin>
                    <plugin>
                        <artifactId>maven-dependency-plugin</artifactId>
                        <version>2.8</version>
                    </plugin>
                    <plugin>
                        <artifactId>maven-release-plugin</artifactId>
                        <version>2.5.3</version>
                    </plugin>
                </plugins>
            </pluginManagement>
        3.生命周期插件
            <plugins>
                <plugin>
                    <artifactId>maven-clean-plugin</artifactId>
                    <version>2.5</version>
                    <executions>
                        <execution>
                            <id>default-clean</id>
                            <phase>clean</phase>
                            <goals>
                                <goal>clean</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>
            </plugins>
    -->
    <build>
        <!--生命周期插件-->
        <plugins>
            <!-- 配置Tomcat插件 -->
            <!--<plugin>
                <groupId>org.apache.tomcat.maven</groupId>
                <artifactId>tomcat7-maven-plugin</artifactId>
                <version>2.2</version>
                <configuration>
                    &lt;!&ndash; 通过maven tomcat7:run运行项目时，访问项目的端口号 &ndash;&gt;
                    <port>8080</port>
                    &lt;!&ndash; 项目访问路径  本例：localhost:8080,  如果配置的aa， 则访问路径为localhost:8080/aa&ndash;&gt;
                    <path>/</path>
                    <uriEncoding>UTF-8</uriEncoding>
                </configuration>
                <dependencies>
                    <dependency>
                        <groupId>javax.servlet</groupId>
                        <artifactId>javax.servlet-api</artifactId>
                        <version>3.1.0</version>
                        &lt;!&ndash; 添加scope标签，并取值为provided（只能作用在编译和测试时，同时没有传递性） &ndash;&gt;
                        <scope>provided</scope>
                        &lt;!&ndash; scope标签取值范围详情
                            compile-默认的scope，表示 dependency 都可以在生命周期中使用。而且，这些dependencies 会传递到依赖的项目中。适用于所有阶段，会随着项目一起发布
                            provided-跟compile相似，但是表明了dependency 由JDK或者容器提供，例如Servlet AP和一些Java EE APIs。这个scope 只能作用在编译和测试时，同时没有传递性。
                            runtime-表示dependency不作用在编译时，但会作用在运行和测试时，如JDBC驱动，适用运行和测试阶段。
                            test-表示dependency作用在测试时，不作用在运行时。 只在测试时使用，用于编译和运行测试代码。不会随项目发布。
                            system-跟provided 相似，但是在系统中要以外部JAR包的形式提供，maven不会在repository查找它。
                        &ndash;&gt;
                    </dependency>
                </dependencies>
            </plugin>-->
        </plugins>
    </build>


</project>